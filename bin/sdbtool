#!/usr/bin/env ruby

require 'main'
require 'highline/import'
require 'fattr'
require 'aws'
require 'progressbar'
require 'pstore'
require 'pathname'
require 'fileutils'
require 'yaml'

require File.expand_path('../lib/sdbtools', File.dirname(__FILE__))

at_exit do
  if $!.kind_of?(Exception) && (!$!.kind_of?(SystemExit))
    $stderr.puts <<"END"
This program has encountered an error and cannot continue. Please see the log
for details.
END
  end
end


Main do
  description 'A tool for working with Amazon SimpleDB'

  class NullObject
    def methods_missing(*args, &block)
      self
    end
  end

  def initialize
    HighLine.track_eof = false
    Aws::RightAWSParser.xml_lib = 'libxml'
  end

  def timestamp
    Time.now.strftime('%Y%m%d%H%M')
  end

  option 'access_key' do
    description 'Amazon AWS access key'
    argument :required
    default ENV.fetch('AMAZON_ACCESS_KEY_ID') {
      ENV.fetch('AWS_ACCESS_KEY_ID')
    }
    attr
  end

  option 'secret_key' do
    description 'Amazon AWS secret key'
    argument :required
    default ENV.fetch('AMAZON_SECRET_ACCESS_KEY') {
      ENV.fetch('AWS_SECRET_ACCESS_KEY')
    }
    attr
  end

  option 'server' do
    description 'SimpleDB server hostname'
    argument :required
    default 'sdb.amazonaws.com'
  end

  option 'port' do
    description 'SimpleDB server port number'
    argument :required
    cast :int
    default 443
  end

  option 'protocol' do
    description 'SimpleDB protocol'
    argument :required
    default 'https'
  end

  option 'nil-rep' do
    description 'How to represent nil values'
    argument :required
    default '<[<[<NIL>]>]>'
  end

  option 'progress' do
    description "Show progress bar"
    cast :bool
    default true
    attr
  end

  option 'verbose' do
    description "Verbose output"
    cast :bool
    default false
    attr
  end
  
  option 'chunk-size', 'n' do
    description "The number of items to process at once"
    cast :int
    default 100
  end

  option 'log' do
    description 'File to log to'
    default 'sdbtool.log'
    attr
  end

  mixin 'domain' do
    argument 'domain' do
      description 'The SimpleDB domain to work on'
      optional
    end

    fattr(:domain) { 
      params['domain'].value || choose(*db.domains) do |q|
        q.prompt = "Domain to operate on?"
      end
    }
  end


  fattr(:db) {
    SDBTools::Database.new(
      access_key,
      secret_key,
      :server => params['server'].value,
      :port   => params['port'].value,
      :logger => logger,
      :nil_representation => params['nil-rep'].value,
      :protocol => params['protocol'].value)
  }

  def after_parse_parameters
  end

  def before_run
    stderr 'sdbtool-errors.log'
    logger ::Logger.new(log)
    unless verbose
      logger.level = ::Logger::WARN
    end
  end

  mode 'dump' do
    description 'Dump the contents of a domain to a file'

    mixin 'domain'

    argument 'file' do
      description 'File to dump into'
      optional
      attr
    end

    def run
      self.file ||= ask("Filename for this dump?") do |q|
        q.default = "#{domain}-#{timestamp}.yaml"
      end
      dump_domain = db.domain(domain)
      logger.info "Preparing to dump domain #{dump_domain.name}"
      dump = db.make_dump(dump_domain, file)
      dump.chunk_size = params['chunk-size'].value
      count = dump.incomplete_count
      logger.info "Dumping #{count} objects to #{file}"
      pbar = progress ? ProgressBar.new("dump", count,stdout) : NullObject.new
      dump.callback = lambda do |item_name|
        logger.info "Dumped #{item_name}"
        pbar.inc
      end
      dump.start!
      pbar.finish
      logger.info "Dump succeeded"
    end
  end

  mode 'count' do
    description 'Count the number of items in a domain'
    mixin 'domain'

    def run
      domain = db.domain(params['domain'].value)
      puts domain.count
    end
  end

  mode 'load' do
    description 'Load a domain from a file'

    mixin 'domain'

    argument 'file' do
      description 'The file to load from'
      attr
    end

    def run
      target_domain = if db.domain_exists?(domain)
                        db.domain(domain)
                      else
                        logger.info "Creating domain #{domain}"
                        db.create_domain(domain)
                      end
      say "About to load domain #{target_domain.name} from #{file}"
      return unless agree("Are you sure you want to continue?")
      load = db.make_load(target_domain, file)
      load.chunk_size = params['chunk-size'].value
      count = load.incomplete_count
      pbar = progress ? ProgressBar.new("load", count, stdout) : NullObject.new
      load.callback = lambda do |item_name|
        logger.info "Loaded #{item_name}"
        pbar.inc
      end
      load.start!
      pbar.finish
      logger.info "Finished loading #{file} into #{domain}"
    end

  end

  mode 'status' do
    description 'Show the status of an operation'
    
    argument 'title' do
      description 'The title of the operation'
      optional
      attr
    end

    option 'failed' do
      description 'Show details about failed items'
      default false
      cast :bool
    end

    def run
      self.title ||= choose(*Dir['*.simpledb_op_status'])
      status_file = if title =~ /\.simpledb_op_status$/
                      title
                    else
                      title + '.simpledb_op_status'
                    end
      task = SDBTools::Task.new(status_file, logger)
      if params['failed'].given?
        task.failed_items.each do |item_name, info|
          puts item_name + ": "
          puts
          puts info
          puts "-" * 60
        end
      else
        puts task.report
      end
    end
  end

  mode 'info' do
    description 'Show information about a dump file'

    argument 'file' do
      description 'The dump file to examine'
      attr
    end

    def run
      dump_file = SDBTools::DumpFile.new(file)
      puts "File #{file} contains #{dump_file.size} records"
    end
  end

  mode 'delete-domain' do
    description "Delete a SimpleDB domain"
    mixin 'domain'

    def run
      2.times do 
        return unless agree("Are you sure you want to delete #{params['domain'].value}?") # "
      end
      db.delete_domain(params['domain'].value)
    end
  end

  mode 'create-domain' do
    description "Create a SimpleDB domain"

    mixin 'domain'

    def run
      db.create_domain(params['domain'].value)
    end
  end

  mode 'show' do
    description "Show a single SimpleDB item"
    mixin 'domain'

    argument 'item_name' do
      description "The name of the item to show"
      arity -1                  # inifinite
    end

    def run
      db.domain(domain).items(params['item_name'].values).each do |item|
        puts item.to_yaml
      end
    end
  end

  mode 'list' do
    mixin 'domain'
    description "List all objects matching SELECT query"
    
    argument 'query' do
      description "A SimpleDB SELECT where-clause"
    end

    def run
      logger.info "Selecting items where '#{params['query'].value}'"
      items = db.domain(domain).select(params['query'].value)
      logger.info "Selected #{items.count} items"
      items.each do |item|
        puts item['itemName()']
      end
    end
  end

  mode 'remove' do
    mixin 'domain'
    description "Delete an item by name"

    argument 'item_name' do
      description "The name of the item to delete"
    end

    def run
      db.domain(domain).delete(params['item_name'].value)
    end
  end

  def run
    help!
  end
end
